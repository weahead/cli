#!/usr/bin/env bash

if [ -n "${WA_CLI_DEBUG}" ]; then
    set -x
fi

COLOR_BLACK='\033[30m'
COLOR_RED='\033[31m'
COLOR_GREEN='\033[32m'
COLOR_YELLOW='\033[33m'
COLOR_BLUE='\033[34m'
COLOR_MAGENTA='\033[35m'
COLOR_CYAN='\033[36m'
COLOR_LIGHT_GRAY='\033[37m'
COLOR_DARK_GRAY='\033[38m'
COLOR_NORMAL='\033[39m'

bcli_trim_whitespace() {
    # Function courtesy of http://stackoverflow.com/a/3352015
    local var="$*"
    var="${var#"${var%%[![:space:]]*}"}"    # remove leading whitespace characters
    var="${var%"${var##*[![:space:]]}"}"    # remove trailing whitespace characters
    echo -n "$var"
}

bcli_show_header() {
    echo -e "$(bcli_trim_whitespace "$(cat "$1/.name")")"
    echo -e "${COLOR_CYAN}Version    ${COLOR_NORMAL}$(bcli_trim_whitespace "$(cat "$1/.version")")"
    echo -e "${COLOR_CYAN}Author     ${COLOR_NORMAL}$(bcli_trim_whitespace "$(cat "$1/.author")")"
}

wa_project_dir() {
    local PROJECT_DIR
    local INIT_DIR
    PROJECT_DIR=""
    INIT_DIR=$(pwd)
    while [ "${PWD}" != "/" ]; do
        if [ -e Dockerfile ]; then
            PROJECT_DIR=$(pwd)
            break
        else
            cd ..
        fi
    done
    cd "${INIT_DIR}" || return 1

    if [ -n "${PROJECT_DIR}" ]; then
        echo "${PROJECT_DIR}"
        return 0
    else
        echo "Please run this command from within a weahead project folder ðŸ¤¦" >&2
        return 1
    fi
}

wa_dinghy_running() {
    if dinghy status | grep "VM: running" 1>/dev/null 2>&1; then
      return 0
    fi
    return 1
}

wa_check_docker() {
    if ! docker ps 1>/dev/null 2>&1; then
        if hash dinghy 2>/dev/null; then
            if ! wa_dinghy_running; then
                if ! dinghy up 1>/dev/null 2>&1; then
                    if ! docker-machine start dinghy 1>/dev/null 2>&1; then
                        echo "Failed to start Dinghy ðŸ˜§" >&2
                        echo "Try manually starting it and rerunning the command." >&2
                        return 1
                    fi
                    dinghy down 1>/dev/null 2>&1
                    dinghy up 1>/dev/null 2>&1
                fi
            fi
            eval "$(dinghy env)"
            return 0
        else
            echo "Could not find Dinghy, is it installed properly? ðŸ¤”" >&2
            return 1
        fi
        echo "Failed to communicate with Docker daemon ðŸ˜­" >&2
        return 1
    fi
}

wa_image_name () {
    local PROJECT_DIR
    PROJECT_DIR=$(wa_project_dir) || exit $?
    head -n 1 "${PROJECT_DIR}/Dockerfile" | sed 's/FROM //' | sed 's/:.*//'
}

wa_image_version () {
    local PROJECT_DIR
    PROJECT_DIR=$(wa_project_dir) || exit $?
    head -n 1 "${PROJECT_DIR}/Dockerfile" | sed 's/.*://'
}

wa_ask () {
  # https://gist.github.com/davejamesmiller/1965569
  # https://djm.me/ask
  local prompt default reply question

  if [ -z "${1}" ]; then
    question="Are you sure you want to continue?"
  else
    question="${1}"
  fi

  while true; do

    if [ "${2:-}" = "Y" ]; then
      prompt="Y/n"
      default=Y
    elif [ "${2:-}" = "N" ]; then
      prompt="y/N"
      default=N
    else
      prompt="y/n"
      default=
    fi

    # Ask the question (not using "read -p" as it uses stderr not stdout)
    echo -en "${COLOR_YELLOW}${question} [${prompt}] ${COLOR_NORMAL}"

    # Read the answer (use /dev/tty in case stdin is redirected from somewhere else)
    read -r reply </dev/tty

    # Empty line for spacing in output
    echo

    # Default?
    if [ -z "${reply}" ]; then
      reply=${default}
    fi

    # Check if the reply is valid
    case "${reply}" in
      Y*|y*) return 0 ;;
      N*|n*) return 1 ;;
    esac

  done
}

abort () {
  echo -e "${COLOR_RED}"
  if [ -n "${1}" ]; then
    echo "${1}"
    echo
  fi
  echo "Aborting."
  echo -e "${COLOR_NORMAL}"
  exit 1
}

warn () {
  echo -e "${COLOR_YELLOW}"
  echo "${1}"
  echo -e "${COLOR_NORMAL}"
}

info () {
  echo -e "${COLOR_BLUE}"
  echo "${1}"
  echo -e "${COLOR_NORMAL}"
}

success () {
  echo -e "${COLOR_BLUE}"
  if [ -n "${1}" ]; then
    echo "${1}"
  else
    echo "Finished successfully"
  fi
  echo -e "${COLOR_NORMAL}"
}

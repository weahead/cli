#!/usr/bin/env bash

ROOT_DIR=$(dirname "$(perl -e 'use Cwd "abs_path"; print abs_path(shift)' "$0")")

if ! START=$(git rev-parse --abbrev-ref HEAD 2>/dev/null); then
  echo "Please run this command in a git enabled repository."
  return
fi
BRANCHES=$(git br -a | grep -E '[0-9]+\.[0-9]+\.[0-9]+' | sed -e 's/remotes\/origin\///' | sort | uniq)

if [ "$#" -eq 2 ]; then
  BASE="${1}"
  BASE_MATCH="${2}"
else
  if [ "$#" -eq 1 ]; then
    BASE="${1}"
  else
    if [ "${START#*\.x}" = "${START}" ]; then
      echo "Current branch is not named like '#.x'. See 'wa help devops rebase-tags' for more info."
      exit 1
    fi
    BASE="${START}"
  fi
  BASE_MATCH="^$(echo "${BASE}" | sed -e 's/\.x.*$/\./')"
fi

echo "Rebasing onto: ${BASE}"
echo "Rebasing branches that match: ${BASE_MATCH}"

SOMETHING_MATCHED=0
for b in ${BRANCHES}
do
  MATCH=$(echo "${b}" | grep -E "${BASE_MATCH}")
  if [ -n "${MATCH}" ]; then
    if [ "${SOMETHING_MATCHED}" -eq 0 ]; then
      echo "Rebasing the following branches:"
      SOMETHING_MATCHED=1
    fi
    echo "${b}"
  fi
done

if [ "${SOMETHING_MATCHED}" -eq 0 ]; then
  echo "No branches matched the pattern ${BASE_MATCH}"
  echo "Aborting."
  return 1
fi

echo "Is this correct and what you expected?"
echo "Press enter to continue or CTRL+C to abort."
read -r

for b in ${BRANCHES}
do
  MATCH=$(echo "${b}" | grep -E "${BASE_MATCH}")
  if [ -n "${MATCH}" ]; then
    if ! git checkout "${b}"; then
      echo "Checkout failed, resolve the errors and rerun this command again."
    fi
    if ! git rebase "${BASE}" "${b}"; then
      echo "Rebase failed, resolve the errors and rerun this command again."
      exit 1
    fi
  fi
done
git co "${START}"
git log --graph --all --oneline --decorate
echo "Done. Please review graph above before pushing."
